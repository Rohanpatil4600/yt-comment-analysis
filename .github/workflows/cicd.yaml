name: CICD Pipeline

on:
  push:
    branches:
      - main

jobs:
  model-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Authenticate with DAGsHub
        run: |
          git config --global credential.helper store
          echo "https://dagshub:${{ secrets.DAGSHUB_TOKEN }}@dagshub.com" > ~/.git-credentials

      - name: Run pipeline
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          dvc pull  # Ensure DVC data is pulled
          dvc repro

      - name: Push DVC-tracked data to remote
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1  # Replace with your AWS region
        run: |
          dvc push

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add changes to Git
        run: |
          git add .

      - name: Commit changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        run: |
          git commit -m "Automated commit of DVC outputs and updated code" || echo "No changes to commit"

      - name: Push changes
        if: ${{ github.actor != 'github-actions[bot]' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin ${{ github.ref_name }}
      
      - name: Install test dependencies
        run: |
          pip install pytest

      - name: Run model loading test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest scripts/test_load_model.py

      - name: Run model signature test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest scripts/test_model_signature.py
      
      - name: Run model performance test
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          pytest scripts/test_model_performance.py
      
      - name: Promote model to production
        if: success()
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          pytest scripts/promote_model.py -v

      - name: Download NLTK stopwords
        run: |
          python -m nltk.downloader stopwords wordnet

      - name: Start Flask App
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          nohup python flask_app/app.py > flask.log 2>&1 &
          echo "Waiting for Flask app to start..."
          for i in {1..10}; do
            if curl --silent http://127.0.0.1:8080/predict -H "Content-Type: application/json" -d '{"comments":["test"]}' > /dev/null; then
              echo "Flask app is ready!"
              exit 0
            fi
            echo "Waiting for Flask app... Attempt $i"
            sleep 3
          done
          echo "Flask app failed to start."
          exit 1

      # - name: Run Flask API tests
      #   run: |
      #     pytest scripts/test_flask_api.py

      # - name: Show Flask logs on failure
      #   if: failure()
      #   run: |
      #     echo "=== Flask server logs ==="
      #     cat flask.log

      - name: Login to AWS ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 977099003933.dkr.ecr.us-east-2.amazonaws.com

      - name: Build Docker image
        if: success()
        run: |
          docker build -t yt-chrome-plug .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag yt-chrome-plug:latest 977099003933.dkr.ecr.us-east-2.amazonaws.com/yt-chrome-plug:latest

      - name: Push Docker image to AWS ECR
        if: success()
        run: |
          docker push 977099003933.dkr.ecr.us-east-2.amazonaws.com/yt-chrome-plug:latest

